local changerank = {}




local config = require(script.Parent.Parent.Parent:WaitForChild("SR_Loader").Config)
local plrranks = script.Parent.Parent:WaitForChild("PlayerRanks")

local DDS = game:GetService("DataStoreService")
local dsName = config["Datastore"]["Name"]
local staffdatastore = DDS:GetDataStore(game.PlaceId..dsName,"Staff")

local TrelloAPI = require(script.Parent.TrelloAPI)
local Trello = config["Trello Stuff"]
local TrelloEnabled = Trello["TrelloEnabled"]
local TrelloToken = Trello["TrelloToken"]
local TrelloBoardName = Trello["TrelloBoardName"]
local TrelloBanListName = Trello["BanListName"]
local TrelloAPIKey = Trello["TrelloAPIKey"]
local TrelloRanks = Trello["Ranks"]

local permrankchanges = config["Miscellaneous"]["PermRankChanges"]

local group = config["Group"]


local customRanks = config["Custom Ranks"]

function changerank.GetChatTag(plr: Player)
	if plr then
		local rankinfo = {nil,nil,true,nil} --[[ string rank, color value, tag enabled, rank name ]]
		
		local rankval = plrranks:FindFirstChild(plr.Name).Value
		
		if rankval == 0 then
			rankinfo[3] = false
			return rankinfo
		end
		
		if rankinfo[2] == nil then
			for _,g in pairs(group) do
				local groupEnabled = g["GroupEnabled"]
				local groupID = g["GroupId"]
				local groupRanks = g["Ranks"]
				
				if groupEnabled and rankinfo[2] == nil then
					for _,v in pairs(groupRanks) do
						if v["RankValue"] == rankval then
							rankinfo[1] = v["StaffTag"]["TagText"]
							rankinfo[2] = v["StaffTag"]["TagColor"]
							rankinfo[3] = v["TagEnabled"]
							rankinfo[4] = v["RankName"]
							break
						end
					end
				else
					break
				end
			end
		end
		

		if Trello["TrelloEnabled"] and rankinfo[2] == nil then
			local board = TrelloAPI:GetBoardID(Trello["TrelloBoardName"])
			for _,v in pairs(TrelloRanks) do
				if v["RankListName"] ~= "" then
					local list = TrelloAPI:GetLists(v["RankListName"],board)
					local cards = TrelloAPI:GetCardsInList(list)
					for _, i in pairs(cards) do
						if v["RankValue"] == rankval then
							rankinfo[1] = v["StaffTag"]["TagText"]
							rankinfo[2] = v["StaffTag"]["TagColor"]
							rankinfo[3] = v["TagEnabled"]
							rankinfo[4] = v["RankName"]
							break
						end
					end
				end
				if rankinfo[2] ~= nil then
					break
				end
			end
		end

		if rankinfo[2] == nil then
			for _,v in pairs(customRanks) do
				if v["RankValue"] == rankval then
					if v["TagEnabled"] == true then
						rankinfo[1] = v["StaffTag"]["TagText"]
						rankinfo[2] = v["StaffTag"]["TagColor"]
						rankinfo[3] = v["TagEnabled"]
						rankinfo[4] = v["RankName"]
					end
					break
				end
			end
		end
		
		
		
		return rankinfo
		
	end
end

function changerank.LoadRank(plr: Player)
	if plr then
		local rankinfo = {nil,nil,false,true}  --[[ {string rank name, rank color, successful?, tag enabled} ]]
		local checked = false
		
		local char = plr.Character or plr.CharacterAdded:Wait()

		local plrrank = char:FindFirstChild("Rank")
		local servplrrank = plrranks:FindFirstChild(plr.Name)
		
		if plr.UserId == game.CreatorId and checked == false then

			plrrank.Value = customRanks["Owner"]["RankValue"]
			servplrrank.Value = customRanks["Owner"]["RankValue"]
			rankinfo[1] = customRanks["Owner"]["RankName"]
			rankinfo[2] = customRanks["Owner"]["StaffTag"]["TagColor"]
			rankinfo[4] = customRanks["Owner"]["TagEnabled"]

			checked = true
		end
		
		if permrankchanges and checked == false then
			local s,rank = pcall(function()
				return staffdatastore:GetAsync(plr.UserId)
			end)
			
			local checked2 = false

			if s then
				plrrank.Value = rank
				servplrrank.Value = rank
				
				
				
				if checked2 == false then
					for _,g in pairs(group) do
						local groupEnabled = g["GroupEnabled"]
						local groupID = g["GroupId"]
						local groupRanks = g["Ranks"]
						local assigned = false
						for _,v in pairs(groupRanks) do
							if v["RankValue"] == rank then
								rankinfo[1] = v["RankName"]
								rankinfo[2] = v["StaffTag"]["TagColor"]
								rankinfo[4] = v["TagEnabled"]
								assigned = true
								break
							end
						end
						if assigned then
							checked2 = true
							break
						end
					end

				end	
				if TrelloEnabled and checked2 == false then
					local temprank = 0;
					local board = TrelloAPI:GetBoardID(TrelloBoardName)

					for _,v in pairs(TrelloRanks) do
						if v["RankListName"] ~= "" then
							local list = TrelloAPI:GetLists(v["RankListName"],board)
							local cards = TrelloAPI:GetCardsInList(list)
							local assigned = false
							for _, i in pairs(cards) do
								if v["RankValue"] == rank then
									rankinfo[1] = v["RankName"]
									rankinfo[2] = v["StaffTag"]["TagColor"]
									rankinfo[4] = v["TagEnabled"]
									assigned = true
									break
								end
							end
							if assigned then
								checked2 = true
								break
							end
						end
					end
				end



				if checked2 == false then

					for _,v in pairs(customRanks) do
						if v["RankValue"] == rank then
							rankinfo[1] = v["RankName"]
							rankinfo[2] = v["StaffTag"]["TagColor"]
							rankinfo[4] = v["TagEnabled"]
							break
						end
					end
					checked2 = true

				end
				
				checked2 = true
			else
				warn("Admin Panel Encountered An Unknown Error.")
				plr:Kick("Failed to load the rank for the user. Please Rejoin.")
				checked2 = false
			end
		end
		
		for _,g in pairs(group) do
			local groupEnabled = g["GroupEnabled"]
			local groupID = g["GroupId"]
			local groupRanks = g["Ranks"]
			if checked == false then
				local assigned = false
				for _,v in pairs(groupRanks) do
					if v["RankId"] == plr:GetRankInGroup(groupID) then
						plrrank.Value = v["RankValue"]
						servplrrank.Value = v["RankValue"]
						rankinfo[1] = v["RankName"]
						rankinfo[2] = v["StaffTag"]["TagColor"]
						rankinfo[4] = v["TagEnabled"]
						assigned = true
						break
					end
				end
				if assigned then
					checked = true
				else
					checked = false
				end
			end	
		end
		
		if TrelloEnabled and checked == false then
			local temprank = 0;
			local board = TrelloAPI:GetBoardID(TrelloBoardName)

			for _,v in pairs(TrelloRanks) do
				if v["RankListName"] ~= "" then
					local list = TrelloAPI:GetLists(v["RankListName"],board)
					local cards = TrelloAPI:GetCardsInList(list)
					local assigned = false
					for _, i in pairs(cards) do
						if string.find(i.name,plr.UserId) or string.find(i.name,plr.Name) then
							temprank = v["RankValue"]
							rankinfo[1] = v["RankName"]
							rankinfo[2] = v["StaffTag"]["TagColor"]
							rankinfo[4] = v["TagEnabled"]
							assigned = true
							break
						end
					end
					if assigned then
						break
					end
				end
			end

			if temprank >0 then
				plrrank.Value = temprank
				servplrrank.Value = temprank
				checked = true
			else
				checked = false
			end
		end

		

		if checked == false then

			for _,v in pairs(customRanks) do
				if (table.find(v["Users"],plr.UserId) or table.find(v["Users"],tostring(plr.UserId)) or table.find(v["Users"],plr.Name)) ~= nil then
					plrrank.Value = v["RankValue"]
					servplrrank.Value = v["RankValue"]
					rankinfo[1] = v["RankName"]
					rankinfo[2] = v["StaffTag"]["TagColor"]
					rankinfo[4] = v["TagEnabled"]
					break
				end
			end
			checked = true

		end
		
		if checked then
			rankinfo[3] = true
		end
		
		return rankinfo
	end
end

function changerank.SetRank(plr: Player,rankval)
	if plr and tonumber(rankval) then
		

		local char = plr.Character or plr.CharacterAdded:Wait()
		
		local charrank = char:FindFirstChild("Rank")
		local servplrrank = plrranks:FindFirstChild(plr.Name)
		
		
		local rankinfo = {rankval,nil,nil,false,false} --[[ {rankval, stringrank, rankcolor, successful?, tagenabled } ]]
		
		if rankval == 0 then
			rankinfo[5] = false
			rankinfo[4] = true
			rankinfo[3] = ""
			rankinfo[2] = ""
			charrank.Value = 0
			servplrrank.Value = 0
			return rankinfo
		end

		
		if permrankchanges then
			local s,err = pcall(function()
				staffdatastore:SetAsync(plr.UserId,rankval)
			end)

			if s == false then
				print("The admin panel encountered an error saving the user's rank; "..err)
			end
		end


		for _,g in pairs(group) do
			local groupEnabled = g["GroupEnabled"]
			local groupID = g["GroupId"]
			local groupRanks = g["Ranks"]
			if groupEnabled and rankinfo[2] == nil then
				for _,v in pairs(groupRanks) do
					local groupEnabled = g["GroupEnabled"]
					local groupID = g["GroupId"]
					local groupRanks = g["Ranks"]

					if v["RankValue"] == rankval then
						rankinfo[2] = v["StaffTag"]["TagText"]
						rankinfo[3] = v["StaffTag"]["TagColor"]
						rankinfo[5] = v["TagEnabled"]
					end
				end
			end
		end
		

		if Trello["TrelloEnabled"] and rankinfo[2] == nil then
			local board = TrelloAPI:GetBoardID(TrelloBoardName)
			for _,v in pairs(TrelloRanks) do
				if v["RankListName"] ~= "" then
					local list = TrelloAPI:GetLists(v["RankListName"],board)
					local cards = TrelloAPI:GetCardsInList(list)
					for _, i in pairs(cards) do
						if v["RankValue"] == rankval then
							rankinfo[2] = v["StaffTag"]["TagText"]
							rankinfo[3] = v["StaffTag"]["TagColor"]
							rankinfo[5] = v["TagEnabled"]
							break
						end
					end
				end
				if rankinfo[2] ~= nil then
					break
				end
			end
		end

		if rankinfo[2] == nil then
			for _,v in pairs(customRanks) do
				if v["RankValue"] == rankval then
					if v["TagEnabled"] == true then
						rankinfo[2] = v["StaffTag"]["TagText"]
						rankinfo[3] = v["StaffTag"]["TagColor"]
						rankinfo[5] = v["TagEnabled"]
					end
					break
				end
			end
		end
		
		charrank.Value = rankval
		servplrrank.Value = rankval

		
		if rankinfo[2] ~= nil and rankinfo[3] ~= nil then
			rankinfo[4] = true
		end
		
		if rankinfo[5] == false then
			rankinfo[2] = nil
			rankinfo[3] = nil
		end
		
		
		return rankinfo
	end
end

return changerank

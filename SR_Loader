if game:GetService("RunService"):IsStudio() then
	warn("Some features of the admin panel will be unavailable in Roblox studio due to the way certain things are ran within Roblox Studio, and is therefore recommended that you conduct most of your testing within the actual game in order to fully test the capabilities of this admin system / panel.")
end

local SSS = game:GetService("ServerScriptService")
local RS = game:GetService("ReplicatedStorage")

local TS = game:GetService("TextChatService")



local config = require(script.Config)


-- group stuff
local group = config["Group"]
local groupEnabled = group["GroupEnabled"]
local groupID = group["GroupId"]
local groupRanks = group["Ranks"]

-- ranks
local customRanks = config["Custom Ranks"]

--cooldowns
local cmdcooldown = config["Cooldowns"]["CommandCooldown"]
local servmsgcooldown = config["Cooldowns"]["ServerMsgCooldown"]
local reportcooldown = config["Cooldowns"]["ReportCooldown"]

-- stafflock

local stafflock = script.StaffLock

--perm rank changes
local permrankchanges = config["Miscellaneous"]["PermRankChanges"]

--banlist
local banlist = config["Banned Users"]




--Datastore stuff
local DDS = game:GetService("DataStoreService")
local bandatastore = DDS:GetDataStore(game.PlaceId,"Banned_Users")
local staffdatastore = DDS:GetDataStore(game.PlaceId,"Staff")

-- chat version
local chatversion 
--checks if chat version is set to legacychatservice
if TS.ChatVersion == Enum.ChatVersion.TextChatService then
	chatversion = "new"
elseif TS.ChatVersion == Enum.ChatVersion.LegacyChatService then
	chatversion = "legacy"
end

--framework parent and values


local framework = script["SR_FrameWork"]

framework.Parent = script.Parent


framework.Disabled = false


local PKU = framework:FindFirstChild("PermKickedUsers")

local CA = framework:FindFirstChild("ChannelAccess")

local UIBlur = framework:FindFirstChild("UIs"):FindFirstChild("UIBlur")
UIBlur.Parent = game.Lighting

-- anti exploit
local AntiExploit = config["Anti-Cheat"]
local AntiExploitEnabled = AntiExploit["AntiCheatEnabled"]
local AEMs = framework.AntiExploitModules

--Trello Stuff
local Trello = config["Trello Stuff"]
local TrelloEnabled = Trello["TrelloEnabled"]
local TrelloToken = Trello["TrelloToken"]
local TrelloBoardName = Trello["TrelloBoardName"]
local TrelloBanListName = Trello["BanListName"]
local TrelloAPIKey = Trello["TrelloAPIKey"]
local TrelloRanks = Trello["Ranks"]

local APIs = framework["API's"]
local TrelloApi = require(APIs.TrelloAPI)

-- overhead tag
local overheadTagAPI = require(APIs.OverheadTag)

-- player service

local players = game:GetService("Players")

players.PlayerAdded:Connect(function(player)

	local framework2 = script.Parent:WaitForChild("SR_FrameWork")
	local API = framework2["API's"]
	local HelpReqUI = framework2["UIs"]["HelpRequests"]:Clone()
	HelpReqUI.Parent = player.PlayerGui



	if stafflock.Value == true then
		player:Kick("Server is currently locked. Please wait until it is unlocked.")
	end

	if PKU:FindFirstChild(player.Name) then
		player:Kick("You have been permanently kicked from this server. Please try joining another server.")
		return
	end


	if table.find(banlist,player.UserId) or table.find(banlist,player.Name) then
		player:Kick("You have been banned from the experience")
		return

	elseif bandatastore:GetAsync(player.UserId) then
		player:Kick("You have been banned from this experience")
		return
	elseif TrelloEnabled == true then
		local BanBoardID = TrelloApi:GetBoardID(TrelloBoardName)

		local BanListID = TrelloApi:GetListID(TrelloBanListName,BanBoardID)
		local BanCards = TrelloApi:GetCardsInList(BanListID)
		for _, i in pairs(BanCards) do
			if string.find(i.name,player.UserId) or string.find(i.name,player.Name) then
				player:Kick("You have been banned from this experience")
			end
		end
	end


	local plrchar = player.Character or player.CharacterAdded:Wait()
	local plrrank = plrchar:WaitForChild("Rank")

	local servplrrank = Instance.new("IntValue")
	servplrrank.Parent = script.Parent:WaitForChild("SR_FrameWork").PlayerRanks
	servplrrank.Name = player.Name

	local apt = script["Admin Panel"]
	framework.UIs.Panel.UIManager.RprtInterval.Value = reportcooldown
	framework.UIs.Panel.UIManager.CMDCooldown.Value = cmdcooldown
	
	local checked = false
	

	if player.UserId == game.CreatorId and checked == false then

		plrrank.Value = customRanks["Owner"]["RankValue"]
		servplrrank.Value = customRanks["Owner"]["RankValue"]

		checked = true
	end
	
	if groupEnabled and checked == false then
		local assigned = false
		for _,v in pairs(groupRanks) do
			if v["RankId"] == player:GetRankInGroup(groupID) then
				plrrank.Value = v["RankValue"]
				servplrrank.Value = v["RankValue"]
				assigned = true
				break
			end
		end
		if assigned then
			checked = true
		else
			checked = false
		end
	end	
	if TrelloEnabled and checked == false then
		local temprank = 0;
		local board = TrelloApi:GetBoardID(TrelloBoardName)
		
		for _,v in pairs(TrelloRanks) do
			if v["RankListName"] ~= "" then
				local list = TrelloApi:GetLists(v["RankListName"],board)
				local cards = TrelloApi:GetCardsInList(list)
				local assigned = false
				for _, i in pairs(cards) do
					if string.find(i.name,player.UserId) or string.find(i.name,player.Name) then
						temprank = v["RankValue"]
						assigned = true
						break
					end
				end
				if assigned then
					break
				end
			end
		end
		
		if temprank >0 then
			plrrank.Value = temprank
			servplrrank.Value = temprank
			checked = true
		else
			checked = false
		end
	end
	
	if permrankchanges and checked == false then
		local s,rank = pcall(function()
			return staffdatastore:GetAsync(player.UserId)
		end)

		if s then
			plrrank.Value = rank
			servplrrank.Value = rank
			checked = true
		else
			warn("Admin Panel Encountered An Unknown Error.")
			player:Kick("Failed to load the rank for the user. Please Rejoin.")
			checked = false
		end
	end

	if checked == false then
		
		for _,v in pairs(customRanks) do
			if (table.find(v["Users"],player.UserId) or table.find(v["Users"],tostring(player.UserId)) or table.find(v["Users"],player.Name)) ~= nil then
				plrrank.Value = v["RankValue"]
				servplrrank.Value = v["RankValue"]
				break
			end
		end
		checked = true

	end

	local plrchannelfolder = Instance.new("Folder")
	plrchannelfolder.Name = player.UserId
	plrchannelfolder.Parent = CA
	
	local char = player.Character or player.CharacterAdded:Wait()
	
	if AntiExploitEnabled then
		local c = char:GetChildren()
		local x = 0
		local r6 = {
			"Head",
			"Torso",
			"HumanoidRootPart",
			"Left Arm",
			"Right Arm",
			"Left Leg",
			"Right Leg",
		}

		local r15 = {
			"Head",
			"LowerTorso",
			"UpperTorso",
			"HumanoidRootPart",
			"LeftLowerArm",
			"LeftUpperArm",
			"LeftHand",
			"RightLowerArm",
			"RightUpperArm",
			"RightHand",
			"LeftLowerLeg",
			"LeftUpperLeg",
			"LeftFoot",
			"RightLowerLeg",
			"RightUpperLeg",
			"RightFoot",
		}
		for i=1,#c do
			if c[i]:IsA("BasePart") then
				if table.find(r6,c[i].Name) then
					x+=1
				elseif table.find(r15,c[i].Name) then
					x +=1
				end
			end
		end
		
		if x == #r6 then
			AEMs.CkVal:Clone().Parent = char[r6[math.random(1,#r6)]]
		elseif x == #r15 then
			AEMs.CkVal:Clone().Parent = char[r15[math.random(1,#r15)]]
		end
	end

	if servplrrank.Value > 0 then
		apt:Clone().Parent = player.Backpack
	end

	if chatversion == "legacy" then
		local chattagAPI = require(API.LegacyChatTagAPI)
		local ChatService = require(SSS:WaitForChild("ChatServiceRunner"):WaitForChild("ChatService"))
		--sets chat tag
		ChatService.SpeakerAdded:Connect(function(speakerName)
			chattagAPI.SetTag(speakerName)
		end)
	else
		local textchannels = game.TextChatService:WaitForChild("TextChannels"):GetChildren()

		for i=1,#textchannels do
			if textchannels[i]:FindFirstChild(player.DisplayName) then
				local channelval = Instance.new("StringValue")
				channelval.Value = textchannels[i].Name
				channelval.Name = textchannels[i].Name
				channelval.Parent = plrchannelfolder
			end
		end
	end
	
	
end)

-- tool stuff

game.Players.PlayerAdded:Connect(function(plr)
	plr.CharacterAdded:Connect(function(char)
		overheadTagAPI.SetTag(plr)
		local humanoid = char:WaitForChild("Humanoid")
		humanoid.Died:Connect(function()
			local v = plr.Backpack:FindFirstChild("Admin Panel")
			if v then
				v:Destroy()
			end
			plr.CharacterAdded:Wait()
			local servplrrank = script.Parent:WaitForChild("SR_FrameWork").PlayerRanks:FindFirstChild(plr.Name)
			if servplrrank then
				if servplrrank.Value > 0 then
					script["Admin Panel"]:Clone().Parent = plr.Backpack
				end
			end
		end)
	end)
end)

local ChatLogs = {}
local MsgNumber = 0
local ChatlogAPI = require(script.Parent:WaitForChild("SR_FrameWork")["API's"]["ChatLogsAPI"])
game.Players.PlayerAdded:Connect(function(player)
	-- chat logs stuff
	player.Chatted:Connect(function(msg)
		if msg then
			local currTime = tostring((DateTime.now()):FormatLocalTime("LLL","en-us")).." EST/EDT"
			table.insert(ChatLogs,{player,player.UserId,msg,currTime,MsgNumber})
			
			local plrrank = script.Parent:WaitForChild("SR_FrameWork"):WaitForChild("PlayerRanks"):FindFirstChild(tostring(player.Name))
			if plrrank.Value > 0 then
				ChatlogAPI.SentMessage(ChatLogs)
			end
			MsgNumber += 1
		end
	end)
end)




local SSS = game:GetService("ServerScriptService")
local RS = game:GetService("ReplicatedStorage")

local TS = game:GetService("TextChatService")




local SRAdminEvents = RS.SRAdminEvents


local config = require(script.Config)
local groupenab = config.groupEnabled
-- group stuff
local groupid = config.groupid
local modrank = config.modrank
local adminrank = config.adminrank
local hadminrank = config.hadminrank
local ownerrank = config.ownerrank
-- ranks
local mod = config.mods
local admin = config.admins
local headadmin = config.headadmin
local owner = config.owner





--cooldowns
local cmdcooldown = config.commandcooldown
local servmsgcooldown = config.servmsgcooldown


--perm rank changes
local permrankchanges = config.permrankchanges





--banlist
local banlist = config.banlist

--Datastore stuff
local DDS = game:GetService("DataStoreService")
local bandatastore = DDS:GetDataStore(game.PlaceId,"Banned_Users")
local staffdatastore = DDS:GetDataStore(game.PlaceId,"Staff")






--setting up cmd perms in panel

local cmds = script.SR_FrameWork.Commands:GetChildren()

for i=1,#cmds do
	
	if cmds[i].Name ~=  "Template" then
		local cmd = require(cmds[i])
		local val = Instance.new("NumberValue")
		val.Name = cmds[i].Name
		val.Value = cmd.RankRequired
		print(val.Name)
		val:Destroy()
	end
end

-- webhook stuff
local webhookenabled = config.webhoookenabled
local webhookid = config.webhookid



--checks if chat version is set to legacychatservice
if TS.ChatVersion == Enum.ChatVersion.TextChatService then
	error("Please ensure that the chat service is set to LegacyChatService for this admin panel to work as support for the new chat service has yet to be implemented.")
end

--framework parent and values


local framework = script["SR_FrameWork"]

framework.Parent = script.Parent


framework.Disabled = false


local PKU = framework:FindFirstChild("PermKickedUsers")





--Trello Stuff






TrelloEnabled = config.TrelloEnabled



TrelloToken = config.TrelloToken

TrelloBoardName = config.TrelloBoardName

TrelloBanListName = config.TrelloBanListName

TrelloAPIKey = config.TrelloAPIKey





local APIs = framework["API's"]
local TrelloApi = require(APIs.TrelloAPI)

local modlist = config.TrelloModsListName
local adminlist = config.TrelloAdminListName
local headadminlist = config.TrelloHeadAdminListName
local ownerlist = config.TrelloOwnersListName


-- player service

local players = game:GetService("Players")


warn("Successfully loaded values & framework. Enjoy! - questionable_existence / Scripter_Rickster")

players.PlayerAdded:Connect(function(player)
	
	local framework2 = script.Parent:WaitForChild("SR_FrameWork")
	local API = framework2["API's"]
	local chattagAPI = require(API.ChatTagAPI)
	local ChatService = require(SSS:WaitForChild("ChatServiceRunner"):WaitForChild("ChatService"))

	if PKU:FindFirstChild(player.Name) then
		player:Kick("You have been permanently kicked from this server. Please try joining another server.")
	end
	
	
	if table.find(banlist,player.UserId) or table.find(banlist,player.Name) then
		player:Kick("You have been banned from the experience")
		
	elseif bandatastore:GetAsync(player.UserId) then
		player:Kick("You have been banned from this experience")
		
	elseif TrelloEnabled == true then
		

		
		local BanBoardID = TrelloApi:GetBoardID(TrelloBoardName)
		
		local BanListID = TrelloApi:GetListID(TrelloBanListName,BanBoardID)
		local BanCards = TrelloApi:GetCardsInList(BanListID)
		for _, i in pairs(BanCards) do
			if string.find(i.name,player.UserId) or string.find(i.name,player.Name) then
				player:Kick("You have been banned from this experience")
			end
		end
	end
	
	
	
	local plrchar = player.Character or player.CharacterAdded:Wait()
	local plrrank = plrchar:WaitForChild("Rank")
	
	local servplrrank = Instance.new("IntValue")
	servplrrank.Parent = script.Parent:WaitForChild("SR_FrameWork").PlayerRanks
	servplrrank.Name = player.Name
	
	local checked = false
	
	if groupenab and checked == false then
		
		if player:GetRankInGroup(groupid) == modrank then
			
			
			plrrank.Value = 1
			servplrrank.Value = 1
			
			
			   
			--gui:Clone().Parent = player.PlayerGui
		elseif player:GetRankInGroup(groupid) == adminrank then
			plrrank.Value = 2
			servplrrank.Value = 2
		
			 
			--gui:Clone().Parent = player.PlayerGui
			
		elseif player:GetRankInGroup(groupid) == hadminrank then
			
			
			plrrank.Value = 3
			servplrrank.Value = 3
			
			   
			--gui:Clone().Parent = player.PlayerGui
			
		elseif player:GetRankInGroup(groupid) == ownerrank then
			
			  
			plrrank.Value = 4
			servplrrank.Value = 4
			 
			    
			--gui:Clone().Parent = player.PlayerGui
		end
		checked = true
		
		
		
		
	elseif player.UserId == game.CreatorId and checked == false then
		
		plrrank.Value = 4
		servplrrank.Value = 4
		
		--gui:Clone().Parent = player.PlayerGui
		checked = true
		
	elseif TrelloEnabled and checked == false then
		local temprank = 0;
		local board = TrelloApi:GetBoardID(TrelloBoardName)
		local modslist = TrelloApi:GetLists(modlist,board)
		local modcards = TrelloApi:GetCardsInList(modslist)
		local adminslist = TrelloApi:GetLists(adminlist,board)
		local admincards = TrelloApi:GetCardsInList(adminslist)
		local headadminslist = TrelloApi:GetLists(headadminlist,board)
		local headadmincards = TrelloApi:GetCardsInList(headadminslist)
		local ownerslist = TrelloApi:GetLists(ownerlist,board)
		local ownercards = TrelloApi:GetCardsInList(ownerslist)
		
		for _, i in pairs(modcards) do
			if string.find(i.name,player.UserId) or string.find(i.name,player.Name) then
				temprank = 1
			end
		end
		for _, i in pairs(admincards) do
			if string.find(i.name,player.UserId) or string.find(i.name,player.Name) then
				temprank = 2
			end
		end
		for _, i in pairs(headadmincards) do
			if string.find(i.name,player.UserId) or string.find(i.name,player.Name) then
				temprank = 3
			end
		end
		for _, i in pairs(ownercards) do
			if string.find(i.name,player.UserId) or string.find(i.name,player.Name) then
				temprank = 4
			end
		end
		
		plrrank.Value = temprank
		servplrrank.Value = temprank
		--gui:Clone().Parent = player.PlayerGui
		
		checked = true
		
	elseif permrankchanges and checked == false then
		local s,rank = pcall(function()
			return staffdatastore:GetAsync(player.UserId)
		end)
		
		if s then
			plrrank.Value = rank
			servplrrank.Value = rank
			--gui:Clone().Parent = player.PlayerGui
		else
			print("Admin Panel Encountered An Unknown Error.")
			player:Kick("Failed to load the rank for the user. Please Rejoin.")
		end
		checked = true
		
	elseif checked == false then
		if table.find(mod,player.UserId) or table.find(mod,player.Name) then
			
			plrrank.Value = 1
			servplrrank.Value = 1
			--gui:Clone().Parent = player.PlayerGui
			
		elseif table.find(admin,player.UserId) or table.find(admin,player.Name) then
		
			plrrank.Value = 2
			servplrrank.Value = 2
			
		
			
			--gui:Clone().Parent = player.PlayerGui
		elseif table.find(headadmin,player.UserId) or table.find(headadmin,player.Name) then
		
			plrrank.Value = 3
			servplrrank.Value = 3
			
		
			
			--gui:Clone().Parent = player.PlayerGui
		elseif table.find(owner,player.UserId) or table.find(owner,player.Name) then
			
		
			plrrank.Value = 4
			servplrrank.Value = 4
			
		
			
			--gui:Clone().Parent = player.PlayerGui
			
			
		end
		checked = true
		
	end
	--sets chat tag
	ChatService.SpeakerAdded:Connect(function(speakerName)
		chattagAPI.SetTag(speakerName)
	end)
	
	
	
end)


wait(0.01)
--DEVELOPER NOTE: PLEASE DO NOT TOUCH CODE THAT IS GREY. DOING SO MAY RESULT IN SEVERAL ERRORS BEING PRODUCED

--services

local DDS = game:GetService("DataStoreService")

local TPS = game:GetService("TeleportService")

local RS = game:GetService("ReplicatedStorage").SRAdminEvents

local SStorage = game:GetService("ServerStorage")

local Players = game:GetService("Players")

local HTTPS = game:GetService("HttpService")

local TCS = game:GetService("TextChatService")

local MS = game:GetService("MessagingService")

local TS = game:GetService("TextService")

local ServerScriptService = game:GetService("ServerScriptService")

-- API's , Command and Anti Exploit Modules
local Commands = script["Commands"]

local  AEMs = script["AntiExploitModules"]
local APIs = script["API's"]

local wbhkAPI = require(APIs.WebhookAPI)
local helpReqAPI = require(APIs.HelpReqAPI)
local AEK = require(AEMs["AntiExploitKick"])
local overheadTagAPI = require(APIs.OverheadTagAPI)
local rankAPI = require(APIs.RankAPI)


-- global announcements stuff

local msgAnnounced = script.Values.ActiveAnnouncement

local UIs = script.UIs
local msgui = UIs.ServerMessage



MS:SubscribeAsync("Global Announcements",function(info)
	if info then
		info = HTTPS:JSONDecode(info.Data)
		repeat wait() until msgAnnounced.Value == false
		msgAnnounced.Value = true
		local gameplrs = game.Players:GetChildren()

		for i=1,#gameplrs do
			if gameplrs[i] then
				local msguic = msgui:Clone()
				msguic.Modal.Desc.Stats.TextRegion.Role.Text = tostring(info['Message']) -- msg
				msguic.Modal.Info.Stats.Plr.UserId.Value = tonumber(info['Staff UserID']) -- staff id
				msguic.Modal.Info.Stats.TextRegion.Title.Text = tostring(info['Staff Name']) -- staff name
				msguic.Modal.Info.Stats.TextRegion.Role.Text = tostring(info['Rank Name']) -- rank str
				msguic.Parent = gameplrs[i].PlayerGui
			end
		end
	end
end)




-- chatversion & mutedplayer stuff
local chatversion = TCS.ChatVersion
local MutedPlayers = script.MutedPlayers

-- events
local VerVent = RS.VerVent
local PosEvent = RS.PosEvent
local PltEvent = RS.PltEvent
local CLTEvent = RS.CLTEvent
local ADMEventV2 = RS.ADMEventV2
local UpdateTools = RS.UpdateTools
local DPlrBP = RS.DisplayPlrBPEvent
local DVeh = RS.DispVehEvent
local RprtEvent = RS.ReportEvent
local UpdateLogEvent = RS.UpdateLogEvent
local GetCommands = RS.GetCommands
local GetPlrRank = RS.GetPlayerRank
local ManageUI = RS.ManageUI
local GetChatTagInfo = RS.GetChatTags
local GetThemes = RS.GetThemes
local UpdateChatLogs = RS.UpdateChatLogs
local GetPrefix = RS.GetPrefix
local GetUserModlogs = RS.GetUserModlogs
local ProcessHelpReqEvent = RS.ProcessHelpReqEvent

-- config stuff
local config = require(script.Parent:WaitForChild("SR_Loader"):WaitForChild("Config"))
local rjcmdenabled =  config["Miscellaneous"]["RejoinCMDEnabled"]
local defaulthealth = config["Miscellaneous"]["DefaultHealth"]
local permrankchanges = config["Miscellaneous"]["PermRankChanges"]
local tools = SStorage:WaitForChild("Tools"):GetChildren()
local vehicles = SStorage.Vehicles


-- rank stuff
local customRanks = config["Custom Ranks"]
local groupStuff = config["Group"]
local trelloStuff = config["Trello Stuff"]
local trelloRanks = trelloStuff["Ranks"]

-- themes
local allThemes = config["Miscellaneous"]["Themes"]

--Other UI's
local UIs = script.UIs

local warngui = UIs.WarnGui

local servmsgui = UIs.ServerMessage

local mainpanel = UIs.Panel

--framework stuff

local FlightStuff = script.FlightStuff

local PlrRanks = script.PlayerRanks

local webhookenable = config["Webhook Logging"]["WebhookEnabled"]

local webhookid = config["Webhook Logging"]["WebhookID"]

local MiscStuff = script.MiscellaneousStuff

-- Only used for tool stuff

local currtools = {}
local removetools = {}

-- Help System
local HelpCMD = config["Help System"]["HelpCMD"]

ProcessHelpReqEvent.OnServerEvent:Connect(function(plr,targID)
	if plr and targID then
		if PlrRanks:FindFirstChild(plr.Name) then
			local r = PlrRanks:FindFirstChild(plr.Name)
			if r.Value > 0 then
				if game.Players:GetPlayerByUserId(targID) then
					helpReqAPI.ProcessReq(plr,game.Players:GetPlayerByUserId(targID))
				end
			else
				AEK.TriggeredAE(plr,"Anti Exploit | Attempted to accept a help request without being a staff member for the game.")
			end
		end
	
	end
end)


-- Some other random variables I was too lazy to classify

local anticheat = config["Anti-Cheat"]["AntiCheatEnabled"]
local anticheatignore = config["Anti-Cheat"]["AntiCheatIgnore"]

-- Chat Command Stuff
local ChatCommandsEnabled = config["Chat Commands"]["ChatCMDSEnabled"]
local ChatCommandPrefix = config["Chat Commands"]["ChatCMDSPrefix"]

-- Datastores

local dsName = config["Datastore"]["Name"]..tostring(game.PlaceId)

local Modlogs = DDS:GetDataStore(dsName,"User_Modlogs")

-- Modlogs

GetUserModlogs.OnServerInvoke = function(plr,requser)
	if plr and requser then
		local UsrMdlogs = nil
		local Type = "Name"
		if tonumber(requser) then
			Type = "UserId"
		end

		if Type == "Name" then
			local userid = game.Players:GetUserIdFromNameAsync(tostring(requser))
			if userid then
				local succ,data = pcall(function()
					return Modlogs:GetAsync(tonumber(userid))
				end)
				if succ then
					UsrMdlogs = data
				end

			end
		else
			local userid = tonumber(requser)
			local succ,data = pcall(function()
				return Modlogs:GetAsync(tonumber(userid))
			end)
			if succ then
				UsrMdlogs = data
			end
		end

		return UsrMdlogs
	else
		return nil
	end
end





-- main command handler stuff
ADMEventV2.OnServerEvent:Connect(function(player,opttarg,action,optreason,optextraval)
	if player and action then
		
		local currPlayers = game.Players:GetChildren()
		
		local targ = nil
		for i=1,#currPlayers do
			if string.lower(currPlayers[i].Name) == string.lower(opttarg) then
				targ = currPlayers[i]
			end
		end
		
		local staffrank = PlrRanks[player.Name].Value
		local targrank = 0
		
		if targ ~= nil then
			targrank = PlrRanks[targ.Name].Value
		end
		
		
		
		if Commands:FindFirstChild(action) then
			
			local cmd = require(Commands[action])
			
			local cmdSuccess = false
			
			if action == "Mute" or action == "Unmute" or action == "Warn" or action == "Kick" or action == "Bring" or action == "Unban" or action == "Perm Kick" or action == "Teleport To" and optreason then
				cmdSuccess = cmd.ExecuteCommand(targ,player,staffrank,targrank,optreason)
			elseif action == "Ban" then
				cmdSuccess = cmd.ExecuteCommand(targ,player,staffrank,targrank,optreason,optextraval)
			elseif action == "Shutdown" and optreason then
				cmdSuccess = cmd.ExecuteCommand(player,staffrank,optreason)
			elseif action == "Freeze" or action == "Unfreeze" or action == "Unfly" or action == "View" or action == "Kill" or action == "God" or action == "Ungod" or action == "Refresh" then
				cmdSuccess = cmd.ExecuteCommand(targ,player,staffrank,targrank)
			elseif action == "Fly" or action == "Set Team"  or action == "Give Tool" or action == "Remove Tool" or action == "Set Rank" or action == "Set JumpPower" or action == "Set Walkspeed" and optextraval then
				cmdSuccess = cmd.ExecuteCommand(targ,player,staffrank,targrank,optextraval)
			elseif action == "Set Time" or action == "Announce" or action == "Global Announce" or action == "Spawn Vehicle"  and optextraval then
				cmdSuccess = cmd.ExecuteCommand(player,staffrank,optextraval)
			elseif action == "Staff Lock" and optextraval ~= "" and optreason ~= "" then
				cmdSuccess = cmd.ExecuteCommand(player,staffrank,optreason,optextraval)
			elseif action == "Private Message" and opttarg and optextraval ~= "" then
				cmdSuccess = cmd.ExecuteCommand(targ,player,staffrank,optextraval)
			end
			
			if cmd.LogsToUserModLogs ~= nil and cmdSuccess == true then
				if cmd.LogsToUserModLogs == true and targ~= nil then

					local CurrDate = os.date("*t")
							
					local month = string.format("%02d", CurrDate.month)  
					local day = string.format("%02d", CurrDate.day) 
							
					local DString =  month .. "/" .. day .. "/" .. tostring(CurrDate.year) .. " (MM/DD/YYYY)"
							
					local succ,data = pcall(function()
						if tonumber(targ) then
							return Modlogs:GetAsync(tonumber(targ))
						else
							return Modlogs:GetAsync(tonumber(targ.UserId))
						end
								
					end)
							
					if succ then
						local usernameStr = ""
						local userModlogs = data
						if userModlogs == nil then
							userModlogs = {}
						end
						
						local filteredmsgSuccess, errors = pcall(function()
							local filteredReasonResult = TS:FilterStringAsync(optreason,player.UserId)
							local filteredreason = filteredReasonResult:GetNonChatStringForBroadcastAsync()
							optreason = filteredreason
						end)
						
						if filteredmsgSuccess then
							table.insert(userModlogs,{DString,optreason,action,player.Name.." ("..player.UserId..")"})
							local succ2,err2 = pcall(function()
								if tonumber(targ) then
									usernameStr = game.Players:GetNameFromUserIdAsync(tonumber(targ))
									Modlogs:SetAsync(tonumber(targ),userModlogs)
								else
									usernameStr = game.Players:GetNameFromUserIdAsync(tonumber(targ.UserId))
									Modlogs:SetAsync(tonumber(targ.UserId),userModlogs)
								end
							end)

							if not succ2 then
								print("SR Admin system encountered the following error while trying to save a modlog to the user: "..tostring(usernameStr).." | Error: "..tostring(err2))
							end
						end
					end
				end
			end
		end
	end
end)

-- Chat Commands (it is not recommended to modify this section unless you know exactly what you're doing)
game.Players.PlayerAdded:Connect(function(plr)
	plr.Chatted:Connect(function(cmd)
		overheadTagAPI.SwapStates(plr,cmd)
		if string.lower(cmd) == string.lower(ChatCommandPrefix.."rejoin") then
			TPS:Teleport(game.PlaceId, plr)
			return
		elseif string.lower(cmd) == string.lower(HelpCMD) then
			helpReqAPI.AddReq(plr)
		end
		if cmd and ChatCommandsEnabled == true then
			if string.find(tostring(cmd),tostring(ChatCommandPrefix),1,false) then
				cmd = string.gsub(tostring(cmd),tostring(ChatCommandPrefix),"")
				local parameters = string.split(tostring(cmd)," ")
				if #parameters <= 1 then return end 
				local action
				local actionindex
				local allcmds = Commands:GetChildren()
				local v1 = string.upper(string.sub(tostring(parameters[1]), 1, 1))..string.sub(tostring(parameters[1]), 2, -1)
				local v2 = v1 ..  " " .. string.upper(string.sub(tostring(parameters[2]), 1, 1))..string.sub(tostring(parameters[2]), 2, -1)
				for i=1,#allcmds do
					local alias = require(allcmds[i])
					local cmdloc = false
					if string.lower(v1) == string.lower(alias.ChatCMDAlias) or string.lower(v1) == string.lower(allcmds[i].Name) then
						actionindex = 2
						cmdloc = true
					elseif string.lower(v2) == string.lower(alias.ChatCMDAlias) or string.lower(v2) == string.lower(allcmds[i].Name) then
						actionindex = 3
						cmdloc = true
					end
					if cmdloc == true then
						action = allcmds[i].Name
						break
					end
				end
				local targ = nil
				local attemptedplr = nil
				local currPlayers = game.Players:GetChildren()
				for i=1,#currPlayers do
					if string.lower(currPlayers[i].Name) == string.lower(string.gsub(tostring(parameters[actionindex])," ","")) then
						attemptedplr = currPlayers[i]
						break
					end
				end

				if attemptedplr  then
					targ = attemptedplr
					actionindex += 1
				else
					attemptedplr = plr
					targ = plr
				end
				if attemptedplr == nil then return end
				
				if action and targ ~= "" and targ ~= nil then
					local actionreq = require(Commands[action])
					local staffrank = PlrRanks[plr.Name].Value
					local targrank = PlrRanks[targ.Name].Value
					action = string.lower(tostring(action))
					local paramlength = #parameters
					
					if actionreq.CanBeUsedInChat == false then return end
					
					local cmdSuccess = false
					
					local optreason = ""
					
					if action == "mute" or action == "unmute" or action == "warn" or action == "kick" or action == "bring" or action == "Unban" or action == "perm kick" or action == "teleport to" then
						for i=actionindex,paramlength do
							optreason = optreason .. parameters[i] .. " "
						end
						if optreason ~= "" and optreason ~= nil then
							cmdSuccess = actionreq.ExecuteCommand(targ,plr,staffrank,targrank,optreason)
						end
					elseif action ==  "ban" then
						local duration = parameters[#parameters]
						for i=actionindex,paramlength-1 do
							optreason = optreason .. parameters[i] .. " "
						end
						if optreason ~= "" and optreason ~= nil then
							cmdSuccess = actionreq.ExecuteCommand(targ,plr,staffrank,targrank,optreason,duration)
						end
					elseif action == "shutdown" then
						
						for i=actionindex,paramlength do
							optreason = optreason .. parameters[i] .. " "
						end
						if optreason ~= "" and optreason ~= nil then
							cmdSuccess = actionreq.ExecuteCommand(plr,staffrank,optreason)
						end
					elseif action == "freeze" or action == "unfreeze" or action == "unfly" or action == "view" or action == "kill" or action == "god" or action == "ungod" or action == "refresh" then
						cmdSuccess = actionreq.ExecuteCommand(targ,plr,staffrank,targrank)
					elseif action == "fly" or action == "set team"  or action == "give tool" or action == "remove tool" or action == "set rank" then
						if action ~= "give tool" and action ~= "remove tool" then
							local optextraval = ""
							for i=actionindex,paramlength do
								if i == paramlength then
									optextraval = optextraval .. parameters[i]
								else
									optextraval = optextraval .. parameters[i] .. " "
								end
							end
							if optextraval ~= "" and optextraval ~= nil then
								cmdSuccess = actionreq.ExecuteCommand(targ,plr,staffrank,targrank,optextraval)
							end
						else
							local optextraval = {}
							
							for i=actionindex,paramlength do
								table.insert(optextraval,parameters[i])
							end
							
							if optextraval ~= "" and optextraval ~= nil then
								cmdSuccess = actionreq.ExecuteCommand(targ,plr,staffrank,targrank,optextraval)
							end
						end
						
					elseif action == "set time" or action == "announce" or action == "global announce" or action == "spawn vehicle" then
						local optextraval = ""
						for i=actionindex,paramlength do
							optextraval = optextraval .. parameters[i] .. " "
						end
						if optextraval ~= "" and optextraval ~= nil then
							cmdSuccess = actionreq.ExecuteCommand(plr,staffrank,optextraval)
						end
					elseif action == "staff lock" then
						local optextraval = parameters[paramlength]
						
						for i=actionindex,paramlength-1 do
							optreason = optreason .. parameters[i] .. " "
						end
						if optreason ~= nil and optreason ~= "" and optextraval ~= "" and optextraval ~= nil then
							cmdSuccess = actionreq.ExecuteCommand(plr,staffrank,optreason,optextraval)
						end
					elseif action == "private message" then
						local optextraval = ""
						for i=actionindex,paramlength do
							if i == paramlength then
								optextraval = optextraval .. parameters[i]
							else
								optextraval = optextraval .. parameters[i] .. " "
							end
						end
						if optextraval ~= "" and optextraval ~= nil then
							cmdSuccess = actionreq.ExecuteCommand(targ,plr,staffrank,optextraval)
						end
					elseif action == "set walkspeed" or action == "set jumppower" then
						local optextraval = ""
						for i=actionindex,paramlength do
							if i == paramlength then
								optextraval = optextraval .. parameters[i]
							else
								optextraval = optextraval .. parameters[i] .. " "
							end
						end
						if optextraval ~= nil and optextraval ~= "" then
							if tonumber(optextraval) then
								cmdSuccess = actionreq.ExecuteCommand(targ,plr,staffrank,targrank,optextraval)
							end
						end
					end
					
					if cmd.LogsToUserModLogs ~= nil and cmdSuccess == true then
						if cmd.LogsToUserModLogs == true and targ~= nil then

							local CurrDate = os.date("*t")

							local month = string.format("%02d", CurrDate.month)  
							local day = string.format("%02d", CurrDate.day) 

							local DString =  month .. "/" .. day .. "/" .. tostring(CurrDate.year) .. " (MM/DD/YYYY)"

							local succ,data = pcall(function()
								if tonumber(targ) then
									return Modlogs:GetAsync(tonumber(targ))
								else
									return Modlogs:GetAsync(tonumber(targ.UserId))
								end

							end)

							if succ then
								local usernameStr = ""
								local userModlogs = data
								if userModlogs == nil then
									userModlogs = {}
								end

								local filteredmsgSuccess, errors = pcall(function()
									local filteredReasonResult = TS:FilterStringAsync(optreason,plr.UserId)
									local filteredreason = filteredReasonResult:GetNonChatStringForBroadcastAsync()
									optreason = filteredreason
								end)
								

								if filteredmsgSuccess then
									table.insert(userModlogs,{DString,optreason,action,plr.Name.." ("..plr.UserId..")"})
									local succ2,err2 = pcall(function()
										if tonumber(targ) then
											usernameStr = game.Players:GetNameFromUserIdAsync(tonumber(targ))
											Modlogs:SetAsync(tonumber(targ),userModlogs)
										else
											usernameStr = game.Players:GetNameFromUserIdAsync(tonumber(targ.UserId))
											Modlogs:SetAsync(tonumber(targ.UserId),userModlogs)
										end
									end)

									if not succ2 then
										print("SR Admin system encountered the following error while trying to save a modlog to the user: "..tostring(usernameStr).." | Error: "..tostring(err2))
									end
								end
							end
						end
					end
					
				end
			end
		end
	end)
end)

--Report Event

RprtEvent.OnServerEvent:Connect(function(plr,targ,reason)
	if plr and targ and reason then
		local flagged = require(script.Flagging.Flagged)
		flagged.Reported(plr,targ,reason)
	end
end)

-- Removing The UI From & Giving The UI To The Player
ManageUI.OnServerEvent:Connect(function(plr,action,targ)
	if plr and action then
		local plrgui = plr.PlayerGui
		
		if action == "delete" then
			local t = plrgui:FindFirstChild("Panel")
			if t ~= nil or t == true then
				t.Enabled = false
			end
		elseif action == "give" then
			local t = plrgui:FindFirstChild("Panel")
			if t == false or t == nil then
				local char = plr.Character or plr.CharacterAdded:Wait()
				local hum = char.Humanoid
				mainpanel:Clone().Parent = plr.PlayerGui
				hum:UnequipTools()
			else
				t.Enabled = true
			end
		end
		
	end
end)


-- Get Themes

GetThemes.OnServerInvoke = function(plr)
	if plr then
		return allThemes
	end
end

-- Get Commands
GetCommands.OnServerInvoke = function(plr)
	if plr then
		local plrrank = PlrRanks:FindFirstChild(plr.Name).Value
		if plrrank then
			local AllCommands = script.Commands:GetChildren()
			local c = {}
			for i=1,#AllCommands do
				if AllCommands[i].Name ~= "Template" then
					local v = require(AllCommands[i])
					local n = AllCommands[i].Name
					local r = v.RankRequired
					local a = v.ChatCMDAlias
					local sub = {n,v.Desc,r,a}
					table.insert(c,sub)
				end
			end
			return c
		end
		
	end
end

-- Get Chat Tag Information

GetChatTagInfo.OnServerInvoke = function(plr)
	if plr then
		return rankAPI.GetChatTag(plr)
	end
end

-- Getting the Chat Commands Prefix

GetPrefix.OnServerInvoke = function(plr)
	local plrrank = PlrRanks:FindFirstChild(plr.Name).Value
	if plrrank then
		if plrrank > 0 then
			return ChatCommandPrefix
		end
	end
end

-- Getting the Player Rank

GetPlrRank.OnServerInvoke = function(plr)
	if plr then
		local s = PlrRanks:FindFirstChild(plr.Name)
		if s then
			local rInfo = rankAPI.GetChatTag(plr)
			local info = {rInfo[5],rInfo[4]}

			return info
		end
	end
end



--checking if values are being changed on the client without changing on the server. Anti Exploit
VerVent.OnServerEvent:Connect(function(player,val,nckval)
	if val and nckval and anticheat == true  then
		
		local char = player.Character or player.CharacterAdded:Wait()
		local hum = char.Humanoid
		local reason = nil
		local verkick = false
		local isnotinignoretable = false
		if table.find(anticheatignore,val,1) then
			isnotinignoretable = true
		end
		if isnotinignoretable == false then
			if nckval == "ReportCooldown" then
				local r = player.PlayerGui:FindFirstChild("Panel"):FindFirstChild("UIManager"):FindFirstChild("RprtInterval")
				if r ~= nil and r.Value ~= val then
					reason = "Attempted to change the cooldown value for the report function on the client"
					verkick = true
				end
			elseif nckval == "Flying" then
				local f = char.Flying
				if f.Value ~= val then
					reason = "Attempted to change the flying value on the client"
					verkick = true
				end
			elseif nckval == "Freeze" then
				local fz = char.Frozen
				if fz.Value ~= val then
					reason = "Attempted to change the freeze value on the client"
					verkick = true
				end

			elseif nckval == "AddedGui" then
				if player.PlayerGui:FindFirstChild(val) == nil and val ~= "TextBox" and val ~= "ProximityPrompts" and val ~= "ServerMessage" and val ~= "WarnGui" and val ~= "PrivMsgUI" then
					reason = "Attempted to add the following object: "..val.." to "..player.Name.."'s GUI on the client"
					verkick = true
				end
			elseif nckval == "RemovedGui" then
				if player.PlayerGui:FindFirstChild(val) and val ~= "TextBox" and val ~= "ProximityPrompts" and val ~= "ServerMessage" and val ~= "WarnGui" and val ~= "PrivMsgUI" then
					reason = "Attempted to remove the following object: "..val.." to "..player.Name.."'s GUI on the client"
					verkick = true
				end
			elseif nckval == "AddedChar" then
				if char:FindFirstChild(val) == nil then
					reason = "Attempted to add the following object: "..val.." to "..player.Name.."'s character on the client"
					verkick = true
				end
			elseif nckval == "RemovedChar" then
				if char:FindFirstChild(val) then
					reason = "Attempted to remove the following object: "..val.." to "..player.Name.."'s character on the client"
					verkick = true
				end
			elseif nckval == "AddedWKSPCE" then
				if game.Workspace:FindFirstChild(val) == nil then
					reason = "Attempted to add the following object: "..val.." to "..player.Name.."'s game workspace on the client"
					verkick = true
				end
			elseif nckval == "RemovedWKSPCE" then
				if game.Workspace:FindFirstChild(val) then
					reason = "Attempted to remove the following object: "..val.." to "..player.Name.."'s game workspace on the client"
					verkick = true
				end
			elseif nckval == "AddedBP" then
				if player.Backpack:FindFirstChild(val) == nil then
					reason = "Attempted to add the following object: "..val.." to "..player.Name.."'s backpack on the client"
					verkick = true
				end
			elseif nckval == "RemovedBP" then
				if player.Backpack:FindFirstChild(val) then
					reason = "Attempted to remove the following object: "..val.." to "..player.Name.."'s backpack on the client"
					verkick = true
				end
			elseif nckval == "Rank" then
				local r = char.Rank
				if r ~= nil and r.Value ~= val then
					reason = "Attempted to change the rank value within the character on the client"
					verkick = true
				end
			elseif nckval == "CMDCooldown" then
				local r = player.PlayerGui:FindFirstChild("Panel"):FindFirstChild("UIManager"):FindFirstChild("CMDCooldown")
				if r ~= nil and r.Value ~= val then
					reason = "Attempted to change the command cooldown on the client"
					verkick = true
				end
			elseif nckval == "Admin Tool" then
				reason = "Attempted to obtain the Admin Tool without actually being a staff member of the following game: "..tostring(game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)["Name"]).." ("..game.PlaceId..")"
				verkick = true
			elseif nckval == "WalkSpeed" then
				local wspeed = hum.WalkSpeed
				if val ~= wspeed then
					reason = "Attempted to change their character's walkspeed from: **"..tostring(wspeed).."** to: **"..tostring(val).."** on the client."
					verkick = true
				end
			elseif nckval == "JumpPower" then
				local jpower = hum.JumpPower
				if val ~= jpower then
					reason = "Attempted to change their character's jump-power from: **"..tostring(jpower).."** to: **"..tostring(val).."** on the client."
					verkick = true
				end
			end
			if verkick and reason then
				local AEK = require(AEMs["AntiExploitKick"])
				AEK.TriggeredAE(player,reason)
			end
		end
	end
	
end)

-- checking if player is moving while frozen. Anti Exploit
PosEvent.OnServerEvent:Connect(function(player,lastcf,currentcf)
	if player and lastcf and currentcf then
		local char  = player.Character or player.CharacterAdded:Wait()
		local frozenval = char:WaitForChild("Frozen")
		local humrootpos = char.HumanoidRootPart.CFrame
		
		if frozenval.Value == true and lastcf ~= currentcf then
			
			AEK.TriggeredAE(player,"Moving while frozen")
		end
	end
end)


--tools
UpdateTools.OnServerInvoke = function(player)
	for i=1,#tools do
		if not table.find(currtools,tools[i].Name) then
			table.insert(currtools,tools[i].Name)
		end
	end
	return currtools
end

--remove tools 
DPlrBP.OnServerInvoke = function(player,targ)
	if targ then
		local plr = game.Players[targ]
		local bp = plr:WaitForChild("Backpack"):GetChildren()
		table.clear(removetools)
		for i=1,#bp do
			if not table.find(removetools,bp[i].Name) then
				table.insert(removetools,bp[i].Name)
			end
		end
		return removetools
	end
end

--display vehicles

DVeh.OnServerInvoke = function(player)
	local allvehs = vehicles:GetChildren()
	local vehs = {}
	for i=1,#allvehs do
		if not table.find(vehs,allvehs[i].Name) then
			table.insert(vehs,allvehs[i].Name)
		end
	end
	return vehs
end

-- mute system for the new textchatservice
TCS.DescendantAdded:Connect(function(child)
	if child:IsA("TextSource") then
		for _,v in pairs(MutedPlayers:GetDescendants()) do
			if v.Name == child.Name or v.Value == child.UserId then
				child.CanSend = false
			end
		end
		
	end
end)



--tp character to original pos if frozen

Players.PlayerAdded:Connect(function(player)
	
	local char = player.Character or player.CharacterAdded:Wait()
	
	char.Humanoid.Died:Connect(function()
		
		if script.FrozenUsers:FindFirstChild(player.Name) then
			player.CharacterAdded:Connect(function()
				local refrze = require(AEMs["RespawnFreeze"])
				refrze.TriggeredAE(player)
			end)
		end
	end)
	
end)


-- player leaving
Players.PlayerRemoving:Connect(function(player)
	PlrRanks:FindFirstChild(player.Name):Destroy()
end)



-- miscellaneous anti-cheat stuff

if anticheat then
	while true do
		local allPlrs = game.Players:GetDescendants()
		for _,somePlr in pairs(allPlrs) do
			if somePlr:IsA("Player") then
				local somePlrChar = somePlr.Character or somePlr.CharacterAdded:Wait()
				if somePlrChar:FindFirstChild("D-C") then
					somePlrChar:FindFirstChild("D-C"):Destroy()
				end
				AEMs["D-C"]:Clone().Parent = somePlrChar
			end
		end
		wait(1)
	end
end
